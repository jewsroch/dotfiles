#!/usr/bin/env bash

# enter a few characters and press UpArrow/DownArrow
# to search backwards/forwards through the history
if [ -t 1 ]
then
    bind '"[A":history-search-backward'
    bind '"[B":history-search-forward'
fi

svgOptimize() {
  svgo $1 "optimized_$1"
}
alias svg=svgOptimize

base64Encode() {
  openssl base64 < $1 | tr -d '\n' | pbcopy
}
# alias base64=base64Encode

dumpDB() {
  mysqldump -u root $1 > "$1.sql"
}
# alias dmp=dumpDB

# DB Related Tasks
dump() {
  UTC="$(TZ=UTC date '+%Y.%m.%d_%H.%M')"
  NAME="$1-local-$UTC"
  LOCATION="/Users/cjewsbury/repos/db_backups"

  mysqldump -u root $1 > "$LOCATION/$NAME.sql"

  if [ $? -ne "0" ]
    then
      echo "Oops, something went wrong. Is that the correct DB name?"
      rm "$LOCATION/$NAME.sql"
      echo "(bad file has been deleted)"
    else
      echo "Success!"
      echo "$NAME.sql"
      echo "$NAME.sql" | pbcopy
  fi

  cd $LOCATION
}


jira() {
  open "https:://jira.groupondev.com/browse/$1" -a Google\ Chrome.app
}

gus() {
  branch=$(git name-rev --name-only HEAD 2>/dev/null)
  branch=$(echo $branch | cut -d'/' -f 2)
  open "https://gus.lightning.force.com/apex/ADM_WorkLocator?bugorworknumber=$branch" -a Google\ Chrome.app
}

objira() {
  open "https:://jira.groupondev.com/browse/OBOOK-$1" -a Google\ Chrome.app
}

ghNewBranchFromDevelop() {
  git checkout master
  git pull
  git checkout develop
  git pull
  if [[ -n $(git diff master) ]]; then
    git stash pop
    echo "Develop Branch is not in sync!"
  else
    echo "Develop Branch is in sync!"
    git checkout -b $1 && git push -u origin $1
  fi
}
alias branchdev=ghNewBranchFromDevelop

ghNewBranch() {
  git checkout -b $1 && git push -u origin $1
}
alias branch=ghNewBranch

ghDeleteBranch() {
    git branch -d $1
}
alias delete=ghDeleteBranch

## Helper function to use when confirmation is needed before continuing.
confirm () {
    # call with a prompt string or use a default
    read -r -p "${1:-Are you sure? [y/N]} " response
    case $response in
        [yY][eE][sS]|[yY])
            true
            ;;
        *)
            false
            ;;
    esac
}

## Open the current git branch in browser
## SOURCE: https://gist.github.com/carmat/8728901
## ====================================
## Open the current repo & branch from the command line
## Use flags to navigate to other areas of the repo such as
## commits, branches, pull requests or issues.
## ====================================
## This is an adaptation of @jasonneylon's script.
## Source: http://jasonneylon.wordpress.com/2011/04/22/opening-github-in-your-browser-from-the-terminal/
## ====================================
## @usage: gh
## @usage: gh c
## @usage: gh pr branch-name
function gh() {
  giturl=$(git config --get remote.origin.url)
  if [ "$giturl" == "" ]
    then
     echo "Not a git repository or no remote.origin.url set"
		 return
  fi

  giturl=${giturl/git\@git\.dev\.pardot\.com\:/https://git.dev.pardot.com/}
  branch="$(git symbolic-ref HEAD 2>/dev/null)" ||
  branch="(unnamed branch)"     # detached HEAD
  branch=${branch##refs/heads/}

  if [ "$1" = "" ]; then ## default => code
    giturl=${giturl/\.git/\/tree/}
    giturl=$giturl$branch
    open $giturl
  elif [ "$1" = "h" ]; then ## h => help
    echo ""
    echo "========================================"
    echo "Did you know that 'gh' can be used as is?"
    echo "There are also some other options, listed below:"
    echo "    [h]                      => View help"
    echo "    [c]                      => View commits"
    echo "    [c {SHA}]                => View specific commit from commit SHA"
    echo "    [b]                      => View branches"
    echo "    [pr]                     => View current branch compared to master"
    echo "    [pr branch]              => View current branch compared to specified branch"
    echo "    [i]                      => View issues"
    echo "    [a]                      => View assigned issues (in dev)"
    echo "    [w]                      => View wiki"
    echo "    [s]                      => View settings"
    echo "    [p]                      => View pulse"
    echo "    [g]                      => View graphs"
    echo "    [n]                      => View network"
    echo "    [<filename.ext>]         => Open a file in it's current state in the current branch"
    echo "========================================"
    echo "${giturl}"
  elif [ "$1" = "c" ]; then ## c => commits
    if [ "$2" ]; then
      giturl=${giturl/\.git/\/commit/$2}
    else
      giturl=${giturl/\.git/\/commits/}
      giturl=$giturl$branch
    fi
    open $giturl
  elif [ "$1" = "b" ]; then ## b => branches
    giturl=${giturl/\.git/\/branches}
    open $giturl
  elif [ "$1" = "pr" ]; then ## pr => pull requests
    if [[ -z "$2" ]]; then
      # if a branch has not been specified, compare with master
      giturl=${giturl/\.git/\/compare/$branch?expand=1}
    else
      # if a branch has been specified, compare with current branch
      giturl=${giturl/\.git/\/compare/$2...$branch?expand=1}
    fi
    open $giturl
  elif [ "$1" = "i" ]; then ## i => issues
    giturl=${giturl/\.git/\/issues}
    open $giturl
  # This would be incredibly useful when I have the time
  # elif [ "$1" = "a" ]; then ## a => assigned issues
  #   giturl=${giturl/\.git/\/issues/assigned/$github_user}
  #   open $giturl
  elif [ "$1" = "w" ]; then ## w => wiki
    giturl=${giturl/\.git/\/wiki}
    open $giturl
  elif [ "$1" = "s" ]; then ## w => settings
    giturl=${giturl/\.git/\/settings}
    open $giturl
  elif [ "$1" = "p" ]; then ## w => pulse
    giturl=${giturl/\.git/\/pulls}
    open $giturl
  elif [ "$1" = "g" ]; then ## w => graphs
    giturl=${giturl/\.git/\/graphs}
    open $giturl
  elif [ "$1" = "n" ]; then ## w => network
    giturl=${giturl/\.git/\/network}
    open $giturl
  elif [ "$1" = "es" ]; then ## w => network
    giturl="https://git.dev.pardot.com/Pardot/engagement-studio/pulls"
    open $giturl
  elif [ "$1" = "pardot" ]; then ## w => network
    giturl="https://git.dev.pardot.com/Pardot/pardot/pulls/chad-jewsbury"
    open $giturl
  elif [ "$1" = "me" ]; then ## w => network
    giturl="https://github.com/jewsroch/"
    open $giturl
  elif [ -f "$1" ]; then ## w => <filename.ext>
    giturl=${giturl/\.git/\/blob/$branch/$1}
    open $giturl
  # elif [ "$1" = "files" ]; then ## w => files
  #   giturl=${giturl/\.git/\/network}
  #   open $giturl
  else
    echo ""
    echo "========================================"
    echo "That option is invalid."
    echo "Did you mean:"
    echo "    [h]                      => View help"
    echo "    [c]                      => View commits"
    echo "    [c {SHA}]                => View specific commit from commit SHA"
    echo "    [b]                      => View branches"
    echo "    [pr]                     => View current branch compared to master"
    echo "    [pr branch]              => View current branch compared to specified branch"
    echo "    [i]                      => View issues"
    echo "    [a]                      => View assigned issues (in dev)"
    echo "    [w]                      => View wiki"
    echo "    [s]                      => View settings"
    echo "    [p]                      => View pull requests"
    echo "    [g]                      => View graphs"
    echo "    [n]                      => View network"
		echo "    [book]                   => View Booking Engine Project"
		echo "    [commeng]                => View Communication Engineering Project"
		echo "    [me]                => View Personal Github.com Projects"
    echo "    [<filename.ext>]         => Open a file in it's current state in the current branch"
    echo "========================================"
    echo ""
  fi
}
